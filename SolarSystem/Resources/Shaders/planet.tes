#version 430

layout (quads, equal_spacing, ccw) in;

uniform vec3 cameraPos_m;      // camera position in meters
uniform vec3 cameraPos_M;      // camera position in mega meters
uniform vec3 objPos;		  // object position in meters
uniform float radius;         // planet radius
uniform mat4 model;           // model matrix
uniform mat4 view;            // view matrix
uniform mat4 projection;      // projection matrix

float interpolate(float a0, float a1, float w)
{
	return ((a1 - a0) * (3.0 - w * 2.0) * w * w + a0);
	//return (a1 - a0) * ((w * (w * 6.0 - 15.0) + 10.0) * w * w * w) + a0;
}

// https://www.shadertoy.com/view/4djSRW
///  3 out, 3 in...
vec3 hash33(vec3 p3)
{
	p3 = fract(p3 * vec3(.10310973, .10301031, .09731030));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy + p3.yxx)*p3.zyx);

}

float dotGridGradient3(float ix, float iy, float iz, float x, float y, float z)
{
	vec3 gradient = hash33(vec3(ix, iy, iz));
	
	float dx = x - float(ix);
	float dy = y - float(iy);
	float dz = z - float(iz);

	return (dx * gradient.x + dy * gradient.y + dz * gradient.z);
}

float perlin3(float x, float y, float z, float res)
{
	float x0 = int(res * floor(x / res));
	float x1 = x0 + res;
	float y0 = int(res * floor(y / res));
	float y1 = y0 + res;
	float z0 = int(res * floor(z / res));
	float z1 = z0 + res;

	float sx = (x - float(x0)) / res;
	float sy = (y - float(y0)) / res;
	float sz = (z - float(z0)) / res;

	float n0, n1, iz0, iz1, iz2, iz3, ix0, ix1, value;

	n0 = dotGridGradient3(x0, y0, z0, x, y, z);
	n1 = dotGridGradient3(x0, y0, z1, x, y, z);
	iz0 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x1, y0, z0, x, y, z);
	n1 = dotGridGradient3(x1, y0, z1, x, y, z);
	iz1 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x0, y1, z0, x, y, z);
	n1 = dotGridGradient3(x0, y1, z1, x, y, z);
	iz2 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x1, y1, z0, x, y, z);
	n1 = dotGridGradient3(x1, y1, z1, x, y, z);
	iz3 = interpolate(n0, n1, sz);

	ix0 = interpolate(iz0, iz1, sx);
	ix1 = interpolate(iz2, iz3, sx);

	value = interpolate(ix0, ix1, sy);
	return value;
}

void main()
{
    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // ----------------------------------------------------------------------
    // retrieve control point position coordinates
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
	vec4 p10 = gl_in[2].gl_Position;
	vec4 p11 = gl_in[3].gl_Position;
    
    // compute patch surface normal
    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    //vec4 normal = normalize( vec4(cross(vVec.xyz, uVec.xyz), 0) );

    // bilinearly interpolate position coordinate across patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0;

	// ----------------------------------------------------------------------
	// compute final position in double (there is no real difference in performance for such small portion of operations) 340 fps rtx 3060 worst case
	p.xyz = vec3((normalize(dvec3(p.xyz)) * double(radius) + dvec3(objPos - cameraPos_M)) - dvec3(cameraPos_m));
	
    // ----------------------------------------------------------------------
    // output patch point position in clip space
    gl_Position = projection * view * model * p;

	// z fighting 
	gl_Position.z = 2.0*log(gl_Position.w*1 + 1)/log(10000000000.0 * 1.0 + 1) - 1;
	gl_Position.z *= gl_Position.w;
}