#version 430

layout (quads, equal_spacing, ccw) in;

uniform mat4 view;            // view matrix
uniform mat4 model;           // model matrix
uniform mat4 projection;      // projection matrix

uniform vec3 cameraPos_m;      // camera position in meters
uniform vec3 cameraPos_M;      // camera position in mega meters

uniform vec3 objPos;		  // object position in meters
uniform float radius;         // planet radius
uniform int layers;			  // layers number
uniform float baseAmpl;		  // base amplitude
uniform float pers;			  // amplitude persistence
uniform float baseRes;	      // base resoulution
uniform float lac;			  // resolution lacunarity
uniform float maxAlt;		  // max altitude
uniform float thresh;		  // threshold
uniform int noiseMode;		  // noise mode

out vec3 color;
out vec3 normal;
out vec3 fragPos;
out vec3 cameraPos;
out int spec;

// coloring parameters
vec3 color1 = vec3(0.1921, 0.145, 0.0);
vec3 color2 = vec3(0.0627, 0.4588, 0.0039);
vec3 color3 = vec3(0.0041, 0.1568, 0.3411);
float c0 = (1.0 - thresh) / 2.0 + thresh;

#define PI 3.141592

float interpolate(float a0, float a1, float w)
{
	// linear interpolation - no pattenrs, but shading artefcts
	//return (a1 - a0) * w + a0;

	// cubic interpolation - patterns appears, but no shading artefacts
	return (a1 - a0) * (3.0 - w * 2.0) * w * w + a0;
}

int FK(float k)
{
	return floatBitsToInt(k) ^ floatBitsToInt(cos(k));
}

float hash(float a, float b)
{
    int x = FK(a); int y = FK(b);
    return float((x*x+y)*(y*y-x)+x)/float(2.14e9);
}

// hash without sine
vec3 hash33(vec3 p3)
{
	//float seed = hash(p3.x, hash(p3.y, p3.z));
	//float h1 = hash(seed, seed);
    //float h2 = hash(h1, seed);
    //float h3 = hash(h2, seed);
    //return vec3(h1,h2,h3);

	p3 = fract(p3 * vec3(.10310973, .10301031, .09731030));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy + p3.yxx)*p3.zyx);
}

float dotGridGradient3(float ix, float iy, float iz, float x, float y, float z)
{
	vec3 gradient = hash33(vec3(ix, iy, iz));
	vec3 dist = vec3(x, y, z) - vec3(ix, iy, iz);
	return dot(dist, gradient);
}

float ridgeTransform(float h)
{
	return abs(h - 0.5f) * 2.0f;
}

float sineTransform(float h)
{
	return sin(PI*(h - 1/2)/2 + 1/2) * 1.2;
}

float perlinAux(float x, float y, float z, float res, float ampl)
{
	float x0 = int(res * floor(x / res));
	float x1 = x0 + res;
	float y0 = int(res * floor(y / res));
	float y1 = y0 + res;
	float z0 = int(res * floor(z / res));
	float z1 = z0 + res;

	float sx = (x - float(x0)) / res;
	float sy = (y - float(y0)) / res;
	float sz = (z - float(z0)) / res;

	float n0, n1, iz0, iz1, iz2, iz3, ix0, ix1, value;

	n0 = dotGridGradient3(x0, y0, z0, x, y, z);
	n1 = dotGridGradient3(x0, y0, z1, x, y, z);
	iz0 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x1, y0, z0, x, y, z);
	n1 = dotGridGradient3(x1, y0, z1, x, y, z);
	iz1 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x0, y1, z0, x, y, z);
	n1 = dotGridGradient3(x0, y1, z1, x, y, z);
	iz2 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x1, y1, z0, x, y, z);
	n1 = dotGridGradient3(x1, y1, z1, x, y, z);
	iz3 = interpolate(n0, n1, sz);

	ix0 = interpolate(iz0, iz1, sx);
	ix1 = interpolate(iz2, iz3, sx);

	value = interpolate(ix0, ix1, sy);
	value = ((value / res) * 3.0f + 1.1f);

	return value * ampl;
}

float perlin3(float x, float y, float z, float res, float ampl)
{
	if(noiseMode == 3 || noiseMode == 4)
	{
		float tmp = perlinAux(x, y, z, baseRes * 2, baseAmpl * 24);
		x += tmp;
		y += tmp;
	}

	float x0 = int(res * floor(x / res));
	float x1 = x0 + res;
	float y0 = int(res * floor(y / res));
	float y1 = y0 + res;
	float z0 = int(res * floor(z / res));
	float z1 = z0 + res;

	float sx = (x - float(x0)) / res;
	float sy = (y - float(y0)) / res;
	float sz = (z - float(z0)) / res;

	float n0, n1, iz0, iz1, iz2, iz3, ix0, ix1, value;

	n0 = dotGridGradient3(x0, y0, z0, x, y, z);
	n1 = dotGridGradient3(x0, y0, z1, x, y, z);
	iz0 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x1, y0, z0, x, y, z);
	n1 = dotGridGradient3(x1, y0, z1, x, y, z);
	iz1 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x0, y1, z0, x, y, z);
	n1 = dotGridGradient3(x0, y1, z1, x, y, z);
	iz2 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x1, y1, z0, x, y, z);
	n1 = dotGridGradient3(x1, y1, z1, x, y, z);
	iz3 = interpolate(n0, n1, sz);

	ix0 = interpolate(iz0, iz1, sx);
	ix1 = interpolate(iz2, iz3, sx);

	value = interpolate(ix0, ix1, sy);
	value = ((value / res) * 3.0f + 1.1f);

	if(noiseMode == 1 || noiseMode == 4)
		value = ridgeTransform(value);
	if(noiseMode == 2)
		value = sineTransform(value);

	return value * ampl;
}

float perlin5Layers(vec3 vertex)
{
	float ampl = baseAmpl;
	float res = baseRes;

	float perlin = 0;
	for(int i = 0; i < layers; ++i)
	{
		perlin += perlin3(vertex.x, vertex.y, vertex.z, res, ampl);
		ampl /= pers;
		res /= lac;
	}

	if(perlin < (maxAlt * thresh))
		return maxAlt * thresh;
	
	return perlin;
}

void calcColor(float perlin, vec3 pr)
{
	float a = perlin / maxAlt;
	if(a <= thresh)
	{
		color = color3;
		spec = 1;
	}
	else
	{
		color = color1 * a + (1 - a) * color2;
	}
}

vec3 calcVertexNormal(vec4 p00, vec4 p01, vec4 p10, vec4 p11, float u, float v)
{
	float delta = 0.0625;
	if(distance(normalize(p00) * radius, normalize(p01) * radius) < 100)
		delta = 8;
	float u0 = u + delta;
	float u1 = u - delta;
	float v0 = v - delta;

	// sample point 0 (u0, v)
	vec4 p0 = (p01 - p00) * u0 + p00;
    vec4 p1 = (p11 - p10) * u0 + p10;
    vec3 s0Cube = ((p1 - p0) * v + p0).xyz;
	vec3 s0 = normalize(s0Cube.xyz);
	vec3 s0Sph = s0 * radius;
	s0 = (1 + perlin5Layers(s0Sph)) * s0 + objPos;

	// sample point 1 (u1, v)
	p0 = (p01 - p00) * u1 + p00;
    p1 = (p11 - p10) * u1 + p10;
    vec3 s1Cube = ((p1 - p0) * v + p0).xyz;
	vec3 s1 = normalize(s1Cube.xyz);
	vec3 s1Sph = s1 * radius;
	s1 = (1 + perlin5Layers(s1Sph)) * s1 + objPos;

	//sample point 2 (u, v0)
	p0 = (p01 - p00) * u + p00;
    p1 = (p11 - p10) * u + p10;
    vec3 s2Cube = ((p1 - p0) * v0 + p0).xyz;
	vec3 s2 = normalize(s2Cube.xyz);
	vec3 s2Sph = s2 * radius;
	s2 = (1 + perlin5Layers(s2Sph)) * s2 + objPos;

	vec3 A = s1 - s0;
	vec3 B = s2 - s1;

	return normalize(cross(A, B));
}

void main()
{
    // local uv coordinates
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // patch corners
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
	vec4 p10 = gl_in[2].gl_Position;
	vec4 p11 = gl_in[3].gl_Position;

    // compute position
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0;

	// compute final position in double (there is no significant difference in performance for such small portion of operations)
	
	// spherified position
	dvec3 normalized = normalize(dvec3(p.xyz));
	dvec3 spherified = normalized * double(radius);

	// vertex normal
	normal =  calcVertexNormal(p00, p01, p10, p11, u, v);

	// perlin noise
	float perlin = perlin5Layers(vec3(spherified));
	vec3 noise = vec3(normalized) * perlin;

	// final position
	p.xyz = vec3((spherified + dvec3(objPos - cameraPos_M)) - dvec3(cameraPos_m)) + noise;

	// fragment shader data
	calcColor(perlin, vec3(normalized));
	fragPos = vec3(spherified) + objPos + noise;
	cameraPos = cameraPos_M + cameraPos_m;
	normal = 0.5 * normal + 0.5 * vec3(normalized);

    // output vertex
    gl_Position = projection * view * model * p;

	// z fighting
	gl_Position.z = 2.0*log(gl_Position.w*1 + 1)/log(10000000000.0 * 1.0 + 1) - 1;
	gl_Position.z *= gl_Position.w;
}