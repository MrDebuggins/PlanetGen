#version 430

layout (quads, equal_spacing, ccw) in;

uniform vec3 cameraPos;       // camera position
uniform mat4 model;           // model matrix
uniform mat4 view;            // view matrix
uniform mat4 projection;      // projection matrix
uniform float radius;         // planet radius

void main()
{
    float r = radius;

    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // ----------------------------------------------------------------------
    // retrieve control point position coordinates
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;
    
    // compute patch surface normal
    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    vec4 normal = normalize( vec4(cross(vVec.xyz, uVec.xyz), 0) );

    // bilinearly interpolate position coordinate across patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0;

    // displace point along normal
    //p += normal * 0;
    p = vec4(normalize(p.xyz) * r, 1.0);
    p.xyz -= cameraPos;

    // ----------------------------------------------------------------------
    // output patch point position in clip space
    gl_Position = projection * view * model * p;

    gl_Position.z = 2.0*log(gl_Position.w*1 + 1)/log(10000000000.0*1 + 1) - 1;
	gl_Position.z *= gl_Position.w;
}