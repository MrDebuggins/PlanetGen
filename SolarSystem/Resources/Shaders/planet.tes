#version 430

layout (quads, equal_spacing, ccw) in;

uniform mat4 view;            // view matrix
uniform mat4 model;           // model matrix
uniform mat4 projection;      // projection matrix

uniform vec3 cameraPos_m;      // camera position in meters
uniform vec3 cameraPos_M;      // camera position in mega meters

uniform vec3 objPos;		  // object position in meters
uniform float radius;         // planet radius
uniform float[5] periods;	  // layers resoulutions
uniform float[5] amps;	      // layers amplitudes
uniform float maxAlt;		  // max altitude

out vec3 color;
out vec3 normal;
out vec3 fragPos;


float interpolate(float a0, float a1, float w)
{
	return (a1 - a0) * w + a0;
}

// https://www.shadertoy.com/view/4djSRW
///  3 out, 3 in...
vec3 hash33(vec3 p3)
{
	p3 = fract(p3 * vec3(.10310973, .10301031, .09731030));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy + p3.yxx)*p3.zyx);

}

float dotGridGradient3(float ix, float iy, float iz, float x, float y, float z)
{
	vec3 gradient = hash33(vec3(ix, iy, iz));	
	vec3 dist = vec3(x, y, z) - vec3(ix, iy, iz);
	return dot(dist, gradient);
}

float perlin3(float x, float y, float z, float res)
{
	float x0 = int(res * floor(x / res));
	float x1 = x0 + res;
	float y0 = int(res * floor(y / res));
	float y1 = y0 + res;
	float z0 = int(res * floor(z / res));
	float z1 = z0 + res;

	float sx = (x - float(x0)) / res;
	float sy = (y - float(y0)) / res;
	float sz = (z - float(z0)) / res;

	float n0, n1, iz0, iz1, iz2, iz3, ix0, ix1, value;

	n0 = dotGridGradient3(x0, y0, z0, x, y, z);
	n1 = dotGridGradient3(x0, y0, z1, x, y, z);
	iz0 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x1, y0, z0, x, y, z);
	n1 = dotGridGradient3(x1, y0, z1, x, y, z);
	iz1 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x0, y1, z0, x, y, z);
	n1 = dotGridGradient3(x0, y1, z1, x, y, z);
	iz2 = interpolate(n0, n1, sz);

	n0 = dotGridGradient3(x1, y1, z0, x, y, z);
	n1 = dotGridGradient3(x1, y1, z1, x, y, z);
	iz3 = interpolate(n0, n1, sz);

	ix0 = interpolate(iz0, iz1, sx);
	ix1 = interpolate(iz2, iz3, sx);

	value = interpolate(ix0, ix1, sy);
	return value / res * 3.0f + 1.1f;
}

float perlin5Layers(vec3 vertex)
{
	float perlin = amps[0] * perlin3(float(vertex.x) + objPos.x, float(vertex.y) + objPos.y, float(vertex.z) + objPos.z, periods[0]);
	perlin += amps[1] * perlin3(float(vertex.x) + objPos.x, float(vertex.y) + objPos.y, float(vertex.z) + objPos.z, periods[1]);
	perlin += amps[2] * perlin3(float(vertex.x) + objPos.x, float(vertex.y) + objPos.y, float(vertex.z) + objPos.z, periods[2]);
	perlin += amps[3] * perlin3(float(vertex.x) + objPos.x, float(vertex.y) + objPos.y, float(vertex.z) + objPos.z, periods[3]);
	perlin += amps[4] * perlin3(float(vertex.x) + objPos.x, float(vertex.y) + objPos.y, float(vertex.z) + objPos.z, periods[4]);
	return perlin;
}

void calcColor(float perlin)
{
	if(perlin > maxAlt * 2.0f || perlin < 0)
	{
		color = vec3(1.0f, 0.0f, 0.0f);
	}
	else
	{
		float clr = (perlin / maxAlt);
		color = vec3(clr, clr, clr);
	}
}

vec3 calcVertexNormal(vec4 p00, vec4 p01, vec4 p10, vec4 p11, float u, float v)
{
	float u0 = u - 0.1;
	float u1 = u + 0.1;
	float v0 = v + 0.1;

	// sample point 0 (u0, v)
	vec4 p0 = (p01 - p00) * u0 + p00;
    vec4 p1 = (p11 - p10) * u0 + p10;
    vec4 s0 = (p1 - p0) * v + p0;

	// sample point 1 (u1, v)
	p0 = (p01 - p00) * u1 + p00;
    p1 = (p11 - p10) * u1 + p10;
    vec4 s1 = (p1 - p0) * v + p0;

	//sample point 2 (u, v0)
	p0 = (p01 - p00) * u + p00;
    p1 = (p11 - p10) * u + p10;
    vec4 s2 = (p1 - p0) * v0 + p0;

	vec3 A = s1.xyz - s0.zyz;
	vec3 B = s2.xyz - s1.xyz;

	float x = A.y * B.z - A.z * B.y;
	float y = A.z * B.x - A.x * B.z;
	float z = A.x * B.y - A.y * B.x;

	return normalize(vec3(x, y, z));
}

void main()
{
    // get patch coordinate
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    // ----------------------------------------------------------------------
    // retrieve control point position coordinates
    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
	vec4 p10 = gl_in[2].gl_Position;
	vec4 p11 = gl_in[3].gl_Position;
    
    // compute patch surface normal
    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    normal = normalize( vec4(cross(vVec.xyz, uVec.xyz), 0) ).xyz;

    // bilinearly interpolate position coordinate across patch
    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0;

	// ----------------------------------------------------------------------
	// compute final position in double (there is no significant difference in performance for such small portion of operations) ~500 fps rtx 3060 worst case
	
	// spherified position
	dvec3 normalized = normalize(dvec3(p.xyz));
	dvec3 spherified = normalized * double(radius);

	// perlin noise value
	float perlin = perlin5Layers(vec3(spherified));

	// altitude based color
	calcColor(perlin);
	color = vec3(0,0,1);

	// perlin noise vector
	vec3 noise = 1.0f * vec3(normalized) * perlin;

	p.xyz = vec3((spherified + dvec3(objPos - cameraPos_M)) - dvec3(cameraPos_m)) + noise;
	
	fragPos = p.xyz + cameraPos_m + cameraPos_M;



	
	normal = calcVertexNormal(p00, p01, p10, p11, u, v);




    // ----------------------------------------------------------------------
    // output patch point position in clip space
    gl_Position = projection * view * model * p;

	// z fighting 
	gl_Position.z = 2.0*log(gl_Position.w*1 + 1)/log(10000000000.0 * 1.0 + 1) - 1;
	gl_Position.z *= gl_Position.w;
}